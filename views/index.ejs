<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>EV Charging Station Locator</title>
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/leaflet.css" />
    <!-- Leaflet Routing Machine CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.css" />
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            margin: 0;
            padding: 0;
        }
        #map {
            height: 500px;
            width: 100%;
            margin: 0;
        }
        button {
            padding: 10px 20px;
            margin: 10px 0;
            font-size: 16px;
        }
    </style>
</head>
<body>
    <h2>Find Nearest EV Charging Station</h2>
    <button onclick="getUserLocation()">Find My Location</button>
    <div id="map"></div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet-routing-machine/dist/leaflet-routing-machine.js"></script>

    <script>
        let map = L.map('map').setView([28.6139, 77.2090], 12); // Default center: Delhi
        let stations = [];
        let routingControl;
        let userMarker;
        let userLat, userLon;

        // Add tile layer to the map
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        // Load the stations from your backend
        async function loadStations() {
            try {
                let response = await fetch("/stations");
                stations = await response.json();
                stations.forEach(station => {
                    L.marker([station.latitude, station.longitude])
                        .addTo(map)
                        .bindPopup(`<b>${station.name}</b><br>${station.address}`);
                });
            } catch (err) {
                console.error("Error loading stations:", err);
            }
        }

        // Find the nearest station based on the user's location
        function findNearestStation(userLat, userLon) {
            let nearest = null;
            let minDistance = Number.MAX_VALUE;

            stations.forEach(station => {
                let distance = getDistance(userLat, userLon, station.latitude, station.longitude);
                if (distance < minDistance) {
                    minDistance = distance;
                    nearest = station;
                }
            });

            return nearest;
        }

        // Haversine formula to calculate distance
        function getDistance(lat1, lon1, lat2, lon2) {
            const R = 6371; // Radius of Earth in km
            const dLat = (lat2 - lat1) * Math.PI / 180;
            const dLon = (lon2 - lon1) * Math.PI / 180;
            const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                      Math.sin(dLon / 2) * Math.sin(dLon / 2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            return R * c; // Distance in km
        }

        // Draw route from user to nearest station
        function drawRoute(userLat, userLon, stationLat, stationLon) {
            if (routingControl) {
                map.removeControl(routingControl);
            }

            routingControl = L.Routing.control({
                waypoints: [
                    L.latLng(userLat, userLon),
                    L.latLng(stationLat, stationLon)
                ],
                routeWhileDragging: true
            }).addTo(map);
        }

        // Start tracking the user's location
        function startTracking() {
            if (navigator.geolocation) {
                navigator.geolocation.watchPosition(position => {
                    userLat = position.coords.latitude;
                    userLon = position.coords.longitude;

                    map.setView([userLat, userLon], 14); // Update map view to new position

                    if (!userMarker) {
                        // Add user marker only once
                        userMarker = L.marker([userLat, userLon]).addTo(map)
                            .bindPopup("You are here")
                            .openPopup();
                    } else {
                        // Update user marker position
                        userMarker.setLatLng([userLat, userLon]);
                    }

                    // Find the nearest station and draw the route
                    let nearestStation = findNearestStation(userLat, userLon);
                    if (nearestStation) {
                        drawRoute(userLat, userLon, nearestStation.latitude, nearestStation.longitude);
                    }
                }, (error) => {
                    console.error("Error getting location:", error);
                }, {
                    enableHighAccuracy: true,
                    maximumAge: 10000,
                    timeout: 10000
                });
            } else {
                alert("Geolocation is not supported by your browser.");
            }
        }

        // Initialize the map and start tracking
        async function init() {
            await loadStations();
            startTracking();
        }

        init();
    </script>
</body>
</html>
